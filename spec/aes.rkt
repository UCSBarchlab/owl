; #lang rosette/safe
(require racket/match)

(define (and-match x y) (match x [(? boolean?) (and x y)] [_ (bvand x y)]))
(define (or-match x y) (match x [(? boolean?) (or x y)] [_ (bvor x y)]))
(define (xor-match x y) (match x [(? boolean?) (xor x y)] [_ (bvxor x y)]))

(define s-table (vector-immutable (bv 99 8)
    (bv 124 8)
    (bv 119 8)
    (bv 123 8)
    (bv 242 8)
    (bv 107 8)
    (bv 111 8)
    (bv 197 8)
    (bv 48 8)
    (bv 1 8)
    (bv 103 8)
    (bv 43 8)
    (bv 254 8)
    (bv 215 8)
    (bv 171 8)
    (bv 118 8)
    (bv 202 8)
    (bv 130 8)
    (bv 201 8)
    (bv 125 8)
    (bv 250 8)
    (bv 89 8)
    (bv 71 8)
    (bv 240 8)
    (bv 173 8)
    (bv 212 8)
    (bv 162 8)
    (bv 175 8)
    (bv 156 8)
    (bv 164 8)
    (bv 114 8)
    (bv 192 8)
    (bv 183 8)
    (bv 253 8)
    (bv 147 8)
    (bv 38 8)
    (bv 54 8)
    (bv 63 8)
    (bv 247 8)
    (bv 204 8)
    (bv 52 8)
    (bv 165 8)
    (bv 229 8)
    (bv 241 8)
    (bv 113 8)
    (bv 216 8)
    (bv 49 8)
    (bv 21 8)
    (bv 4 8)
    (bv 199 8)
    (bv 35 8)
    (bv 195 8)
    (bv 24 8)
    (bv 150 8)
    (bv 5 8)
    (bv 154 8)
    (bv 7 8)
    (bv 18 8)
    (bv 128 8)
    (bv 226 8)
    (bv 235 8)
    (bv 39 8)
    (bv 178 8)
    (bv 117 8)
    (bv 9 8)
    (bv 131 8)
    (bv 44 8)
    (bv 26 8)
    (bv 27 8)
    (bv 110 8)
    (bv 90 8)
    (bv 160 8)
    (bv 82 8)
    (bv 59 8)
    (bv 214 8)
    (bv 179 8)
    (bv 41 8)
    (bv 227 8)
    (bv 47 8)
    (bv 132 8)
    (bv 83 8)
    (bv 209 8)
    (bv 0 8)
    (bv 237 8)
    (bv 32 8)
    (bv 252 8)
    (bv 177 8)
    (bv 91 8)
    (bv 106 8)
    (bv 203 8)
    (bv 190 8)
    (bv 57 8)
    (bv 74 8)
    (bv 76 8)
    (bv 88 8)
    (bv 207 8)
    (bv 208 8)
    (bv 239 8)
    (bv 170 8)
    (bv 251 8)
    (bv 67 8)
    (bv 77 8)
    (bv 51 8)
    (bv 133 8)
    (bv 69 8)
    (bv 249 8)
    (bv 2 8)
    (bv 127 8)
    (bv 80 8)
    (bv 60 8)
    (bv 159 8)
    (bv 168 8)
    (bv 81 8)
    (bv 163 8)
    (bv 64 8)
    (bv 143 8)
    (bv 146 8)
    (bv 157 8)
    (bv 56 8)
    (bv 245 8)
    (bv 188 8)
    (bv 182 8)
    (bv 218 8)
    (bv 33 8)
    (bv 16 8)
    (bv 255 8)
    (bv 243 8)
    (bv 210 8)
    (bv 205 8)
    (bv 12 8)
    (bv 19 8)
    (bv 236 8)
    (bv 95 8)
    (bv 151 8)
    (bv 68 8)
    (bv 23 8)
    (bv 196 8)
    (bv 167 8)
    (bv 126 8)
    (bv 61 8)
    (bv 100 8)
    (bv 93 8)
    (bv 25 8)
    (bv 115 8)
    (bv 96 8)
    (bv 129 8)
    (bv 79 8)
    (bv 220 8)
    (bv 34 8)
    (bv 42 8)
    (bv 144 8)
    (bv 136 8)
    (bv 70 8)
    (bv 238 8)
    (bv 184 8)
    (bv 20 8)
    (bv 222 8)
    (bv 94 8)
    (bv 11 8)
    (bv 219 8)
    (bv 224 8)
    (bv 50 8)
    (bv 58 8)
    (bv 10 8)
    (bv 73 8)
    (bv 6 8)
    (bv 36 8)
    (bv 92 8)
    (bv 194 8)
    (bv 211 8)
    (bv 172 8)
    (bv 98 8)
    (bv 145 8)
    (bv 149 8)
    (bv 228 8)
    (bv 121 8)
    (bv 231 8)
    (bv 200 8)
    (bv 55 8)
    (bv 109 8)
    (bv 141 8)
    (bv 213 8)
    (bv 78 8)
    (bv 169 8)
    (bv 108 8)
    (bv 86 8)
    (bv 244 8)
    (bv 234 8)
    (bv 101 8)
    (bv 122 8)
    (bv 174 8)
    (bv 8 8)
    (bv 186 8)
    (bv 120 8)
    (bv 37 8)
    (bv 46 8)
    (bv 28 8)
    (bv 166 8)
    (bv 180 8)
    (bv 198 8)
    (bv 232 8)
    (bv 221 8)
    (bv 116 8)
    (bv 31 8)
    (bv 75 8)
    (bv 189 8)
    (bv 139 8)
    (bv 138 8)
    (bv 112 8)
    (bv 62 8)
    (bv 181 8)
    (bv 102 8)
    (bv 72 8)
    (bv 3 8)
    (bv 246 8)
    (bv 14 8)
    (bv 97 8)
    (bv 53 8)
    (bv 87 8)
    (bv 185 8)
    (bv 134 8)
    (bv 193 8)
    (bv 29 8)
    (bv 158 8)
    (bv 225 8)
    (bv 248 8)
    (bv 152 8)
    (bv 17 8)
    (bv 105 8)
    (bv 217 8)
    (bv 142 8)
    (bv 148 8)
    (bv 155 8)
    (bv 30 8)
    (bv 135 8)
    (bv 233 8)
    (bv 206 8)
    (bv 85 8)
    (bv 40 8)
    (bv 223 8)
    (bv 140 8)
    (bv 161 8)
    (bv 137 8)
    (bv 13 8)
    (bv 191 8)
    (bv 230 8)
    (bv 66 8)
    (bv 104 8)
    (bv 65 8)
    (bv 153 8)
    (bv 45 8)
    (bv 15 8)
    (bv 176 8)
    (bv 84 8)
    (bv 187 8)
    (bv 22 8)
))

(define xs-table (vector-immutable (bv 198 8)
    (bv 248 8)
    (bv 238 8)
    (bv 246 8)
    (bv 255 8)
    (bv 214 8)
    (bv 222 8)
    (bv 145 8)
    (bv 96 8)
    (bv 2 8)
    (bv 206 8)
    (bv 86 8)
    (bv 231 8)
    (bv 181 8)
    (bv 77 8)
    (bv 236 8)
    (bv 143 8)
    (bv 31 8)
    (bv 137 8)
    (bv 250 8)
    (bv 239 8)
    (bv 178 8)
    (bv 142 8)
    (bv 251 8)
    (bv 65 8)
    (bv 179 8)
    (bv 95 8)
    (bv 69 8)
    (bv 35 8)
    (bv 83 8)
    (bv 228 8)
    (bv 155 8)
    (bv 117 8)
    (bv 225 8)
    (bv 61 8)
    (bv 76 8)
    (bv 108 8)
    (bv 126 8)
    (bv 245 8)
    (bv 131 8)
    (bv 104 8)
    (bv 81 8)
    (bv 209 8)
    (bv 249 8)
    (bv 226 8)
    (bv 171 8)
    (bv 98 8)
    (bv 42 8)
    (bv 8 8)
    (bv 149 8)
    (bv 70 8)
    (bv 157 8)
    (bv 48 8)
    (bv 55 8)
    (bv 10 8)
    (bv 47 8)
    (bv 14 8)
    (bv 36 8)
    (bv 27 8)
    (bv 223 8)
    (bv 205 8)
    (bv 78 8)
    (bv 127 8)
    (bv 234 8)
    (bv 18 8)
    (bv 29 8)
    (bv 88 8)
    (bv 52 8)
    (bv 54 8)
    (bv 220 8)
    (bv 180 8)
    (bv 91 8)
    (bv 164 8)
    (bv 118 8)
    (bv 183 8)
    (bv 125 8)
    (bv 82 8)
    (bv 221 8)
    (bv 94 8)
    (bv 19 8)
    (bv 166 8)
    (bv 185 8)
    (bv 0 8)
    (bv 193 8)
    (bv 64 8)
    (bv 227 8)
    (bv 121 8)
    (bv 182 8)
    (bv 212 8)
    (bv 141 8)
    (bv 103 8)
    (bv 114 8)
    (bv 148 8)
    (bv 152 8)
    (bv 176 8)
    (bv 133 8)
    (bv 187 8)
    (bv 197 8)
    (bv 79 8)
    (bv 237 8)
    (bv 134 8)
    (bv 154 8)
    (bv 102 8)
    (bv 17 8)
    (bv 138 8)
    (bv 233 8)
    (bv 4 8)
    (bv 254 8)
    (bv 160 8)
    (bv 120 8)
    (bv 37 8)
    (bv 75 8)
    (bv 162 8)
    (bv 93 8)
    (bv 128 8)
    (bv 5 8)
    (bv 63 8)
    (bv 33 8)
    (bv 112 8)
    (bv 241 8)
    (bv 99 8)
    (bv 119 8)
    (bv 175 8)
    (bv 66 8)
    (bv 32 8)
    (bv 229 8)
    (bv 253 8)
    (bv 191 8)
    (bv 129 8)
    (bv 24 8)
    (bv 38 8)
    (bv 195 8)
    (bv 190 8)
    (bv 53 8)
    (bv 136 8)
    (bv 46 8)
    (bv 147 8)
    (bv 85 8)
    (bv 252 8)
    (bv 122 8)
    (bv 200 8)
    (bv 186 8)
    (bv 50 8)
    (bv 230 8)
    (bv 192 8)
    (bv 25 8)
    (bv 158 8)
    (bv 163 8)
    (bv 68 8)
    (bv 84 8)
    (bv 59 8)
    (bv 11 8)
    (bv 140 8)
    (bv 199 8)
    (bv 107 8)
    (bv 40 8)
    (bv 167 8)
    (bv 188 8)
    (bv 22 8)
    (bv 173 8)
    (bv 219 8)
    (bv 100 8)
    (bv 116 8)
    (bv 20 8)
    (bv 146 8)
    (bv 12 8)
    (bv 72 8)
    (bv 184 8)
    (bv 159 8)
    (bv 189 8)
    (bv 67 8)
    (bv 196 8)
    (bv 57 8)
    (bv 49 8)
    (bv 211 8)
    (bv 242 8)
    (bv 213 8)
    (bv 139 8)
    (bv 110 8)
    (bv 218 8)
    (bv 1 8)
    (bv 177 8)
    (bv 156 8)
    (bv 73 8)
    (bv 216 8)
    (bv 172 8)
    (bv 243 8)
    (bv 207 8)
    (bv 202 8)
    (bv 244 8)
    (bv 71 8)
    (bv 16 8)
    (bv 111 8)
    (bv 240 8)
    (bv 74 8)
    (bv 92 8)
    (bv 56 8)
    (bv 87 8)
    (bv 115 8)
    (bv 151 8)
    (bv 203 8)
    (bv 161 8)
    (bv 232 8)
    (bv 62 8)
    (bv 150 8)
    (bv 97 8)
    (bv 13 8)
    (bv 15 8)
    (bv 224 8)
    (bv 124 8)
    (bv 113 8)
    (bv 204 8)
    (bv 144 8)
    (bv 6 8)
    (bv 247 8)
    (bv 28 8)
    (bv 194 8)
    (bv 106 8)
    (bv 174 8)
    (bv 105 8)
    (bv 23 8)
    (bv 153 8)
    (bv 58 8)
    (bv 39 8)
    (bv 217 8)
    (bv 235 8)
    (bv 43 8)
    (bv 34 8)
    (bv 210 8)
    (bv 169 8)
    (bv 7 8)
    (bv 51 8)
    (bv 45 8)
    (bv 60 8)
    (bv 21 8)
    (bv 201 8)
    (bv 135 8)
    (bv 170 8)
    (bv 80 8)
    (bv 165 8)
    (bv 3 8)
    (bv 89 8)
    (bv 9 8)
    (bv 26 8)
    (bv 101 8)
    (bv 215 8)
    (bv 132 8)
    (bv 208 8)
    (bv 130 8)
    (bv 41 8)
    (bv 90 8)
    (bv 30 8)
    (bv 123 8)
    (bv 168 8)
    (bv 109 8)
    (bv 44 8)
))

(define rcon-table (vector-immutable
    (bv #xdd 8)
    (bv #x1 8)
    (bv #x2 8) 
    (bv #x4 8)
    (bv #x8 8)
    (bv #x10 8)
    (bv #x20 8)
    (bv #x40 8)
    (bv #x80 8)
    (bv #x1b 8)
    (bv #x36 8)
    (bv #x36 8))); added by andrew for debug

(define (s4 in)
    (concat 
        (vector-ref-bv s-table (extract 31 24 in))
        (vector-ref-bv s-table (extract 23 16 in))
        (vector-ref-bv s-table (extract 15 8 in))
        (vector-ref-bv s-table (extract 7 0 in)))
)

; bv 128 -> list[bv 32]
(define (slice-128-to-32 bv-in)
    (vector-immutable (extract 127 96 bv-in) (extract 95 64 bv-in) (extract 63 32 bv-in) (extract 31 0 bv-in)))

(define (slice-32-to-8 bv-in)
    (vector-immutable (extract 31 24 bv-in) (extract 23 16 bv-in) (extract 15 8 bv-in) (extract 7 0 bv-in))
)

(define (T inp)
    (let* (
        [sl0 (vector-ref-bv s-table inp)]
        [sl3 (vector-ref-bv xs-table inp)]
        [sl2 (bvxor sl0 sl3)]
    )
    (vector-immutable sl0 sl0 sl2 sl3))
)

(define (table-lookup s32)
    (let* (
        [b (slice-32-to-8 s32)]
        [rl_0 (T (vector-ref b 0))]
        [p0 (concat (vector-ref rl_0 3) (vector-ref rl_0 0) (vector-ref rl_0 1) (vector-ref rl_0 2))]
        [rl_1 (T (vector-ref b 1))]
        [p1 (concat (vector-ref rl_1 2) (vector-ref rl_1 3) (vector-ref rl_1 0) (vector-ref rl_1 1))]
        [rl_2 (T (vector-ref b 2))]
        [p2 (concat (vector-ref rl_2 1) (vector-ref rl_2 2) (vector-ref rl_2 3) (vector-ref rl_2 0))]
        [rl_3 (T (vector-ref b 3))]
        [p3 (concat (vector-ref rl_3 0) (vector-ref rl_3 1) (vector-ref rl_3 2) (vector-ref rl_3 3))]
    )
    (vector-immutable p0 p1 p2 p3))
)
;(bv 128, bv 8) -> bv 128
(define (expand-key-128-b in rc)
    (let* 
        ([K (slice-128-to-32 in)]
        [K0 (vector-ref K 0)]
        [K1 (vector-ref K 1)]
        [K2 (vector-ref K 2)]
        [K3 (vector-ref K 3)]
        [v0 (concat (bvxor (extract 31 24 K0) rc) (extract 23 0 K0))]
        [v1 (bvxor v0 K1)]
        [v2 (bvxor v1 K2)]
        [v3 (bvxor v2 K3)]
        [k4a (s4 (concat (extract 23 0 K3) (extract 31 24 K3)))]
        [k0b (bvxor v0 k4a)]
        [k1b (bvxor v1 k4a)]
        [k2b (bvxor v2 k4a)]
        [k3b (bvxor v3 k4a)])
    (concat k0b k1b k2b k3b)))

(define (xor5 x0 x1 x2 x3 x4)
    (bvxor (bvxor (bvxor (bvxor x0 x1) x2) x3) x4)
)

(define (cipher-update-mid state-in rnd key)
    (let* (
        [enc-key (expand-key-128-b key (vector-ref-bv rcon-table rnd))]
        [K0-4 (slice-128-to-32 enc-key)]
        [S0-4 (slice-128-to-32 state-in)]
        [p0 (table-lookup (vector-ref S0-4 0))]
        [p1 (table-lookup (vector-ref S0-4 1))]
        [p2 (table-lookup (vector-ref S0-4 2))]
        [p3 (table-lookup (vector-ref S0-4 3))]
        [z0 (xor5 (vector-ref p0 0) (vector-ref p1 1) (vector-ref p2 2) (vector-ref p3 3) (vector-ref K0-4 0))]
        [z1 (xor5 (vector-ref p0 3) (vector-ref p1 0) (vector-ref p2 1) (vector-ref p3 2) (vector-ref K0-4 1))]
        [z2 (xor5 (vector-ref p0 2) (vector-ref p1 3) (vector-ref p2 0) (vector-ref p3 1) (vector-ref K0-4 2))]
        [z3 (xor5 (vector-ref p0 1) (vector-ref p1 2) (vector-ref p2 3) (vector-ref p3 0) (vector-ref K0-4 3))]
    ) 
    (concat z0 z1 z2 z3))
)

(define (key-update-mid key rnd)
    (expand-key-128-b key (vector-ref-bv rcon-table rnd))
)

(define (cipher-update-final state-in rnd key)
    (let* (
        [enc-key (expand-key-128-b key (vector-ref-bv rcon-table rnd))]
        [K0-4 (slice-128-to-32 enc-key)]
        [S0-4 (slice-128-to-32 state-in)]
        [p0 (slice-32-to-8 (s4 (vector-ref S0-4 0)))]
        [p1 (slice-32-to-8 (s4 (vector-ref S0-4 1)))]
        [p2 (slice-32-to-8 (s4 (vector-ref S0-4 2)))]
        [p3 (slice-32-to-8 (s4 (vector-ref S0-4 3)))]
        [z0_left (concat (vector-ref p0 0) (vector-ref p1 1) (vector-ref p2 2) (vector-ref p3 3))]
        [z1_left (concat (vector-ref p1 0) (vector-ref p2 1) (vector-ref p3 2) (vector-ref p0 3))]
        [z2_left (concat (vector-ref p2 0) (vector-ref p3 1) (vector-ref p0 2) (vector-ref p1 3))]
        [z3_left (concat (vector-ref p3 0) (vector-ref p0 1) (vector-ref p1 2) (vector-ref p2 3))]
        [z0 (bvxor z0_left (vector-ref K0-4 0))]
        [z1 (bvxor z1_left (vector-ref K0-4 1))]
        [z2 (bvxor z2_left (vector-ref K0-4 2))]
        [z3 (bvxor z3_left (vector-ref K0-4 3))])
    (concat z0 z1 z2 z3)))

(define (IntermediateRound-SetDecode pre ports)
    (let* (
            [lt-cond (bvult (pre (ports "round")) (bv 9 4))]
            [gt-cond (bvuge (pre (ports "round")) (bv 1 4))]
        )
    (assume (and lt-cond gt-cond))
))




(define (FinalRound-SetDecode pre ports)
    (let* (
            [c_72206 (bveq (pre (ports "round")) (bv 9 4))]
        )
    (assume c_72206)
))

(define (FinalRound-SetUpdate pre post ports)
    (let* (
        [cipher-pre (pre (ports "ciphertext"))]
        [round-pre (pre (ports "round"))]
        [round-key-pre (pre (ports "round_key"))])
    (assert (bveq (post (ports "ciphertext")) (cipher-update-final cipher-pre round-pre round-key-pre)))
    (assert (bveq (post (ports "round")) (bvadd round-pre (bv 1 4))))
    )
)

(define (FirstRound-SetDecode pre ports)
    (let* (
            [c_33 (bveq (pre (ports "round")) (bv 0 4))]
        )
    (assume c_33)
))


(define (FirstRound-SetUpdate pre post ports)
    (let* (
        [c_35 (xor-match (pre (ports "key_in")) (pre (ports "plaintext")))]
        [c_38 (bvadd (pre (ports "round")) (bv 1 4))]
        )
    (assert (bveq (post (ports "ciphertext")) c_35))
    (assert (bveq (post (ports "round")) c_38))
    (assert (bveq (post (ports "round_key")) (pre (ports "key_in"))))
))


(define (IntermediateRound-SetUpdate pre post ports)
    (let* (
        [cipher-pre (pre (ports "ciphertext"))]
        [round-pre (pre (ports "round"))]
        [round-key-pre (pre (ports "round_key"))]
        )

    (assert (bveq (post (ports "ciphertext")) (cipher-update-mid cipher-pre round-pre round-key-pre)))
    (assert (bveq (post (ports "round_key")) (key-update-mid round-key-pre round-pre)))
    (assert (bveq (post (ports "round")) (bvadd round-pre (bv 1 4))))
))

(define (FullAES pre post ports)
  (let* (
         [first-pre (bveq (pre (ports "round")) (bv 0 4))]
         [lt-cond (bvult (pre (ports "round")) (bv 9 4))]
         [gt-cond (bvuge (pre (ports "round")) (bv 1 4))]
         [inter-pre (and lt-cond gt-cond)]
         [final-pre (bveq (pre (ports "round")) (bv 9 4))])
    (cond
      [first-pre (assume first-pre)
                 (FirstRound-SetUpdate pre post ports)]
      [inter-pre (assume inter-pre)
                 (IntermediateRound-SetUpdate pre post ports)]
      [final-pre (assume final-pre)
                 (FinalRound-SetUpdate pre post ports)])))

; (cipher-update-final (bv #x6d9113f6db9a0c8b2fc665f66cd24266 128) (bv #x9 4) (bv #xb1d4d8e28a7db9da1d7bb3de4c664941 128))
(define spec
(hash
"first" (list FirstRound-SetDecode FirstRound-SetUpdate)
"inter" (list IntermediateRound-SetDecode IntermediateRound-SetUpdate)
"final" (list FinalRound-SetDecode FinalRound-SetUpdate)
"full"  (list FullAES FullAES)))
